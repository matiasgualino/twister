
//----------------------------------------------------
// The following code was generated by Java(tm) CUP v0.9d
// Sun Mar 03 16:58:38 GMT 2013
//----------------------------------------------------

package ar.edu.itba.geb.compiler.jasmin;

import ar.edu.itba.geb.compiler.jas.RuntimeConstants;
import ar.edu.itba.geb.compiler.jas.java_cup.runtime.*;

public class parser extends lr_parser {

  /** constructor */
  public parser() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {25, 4},     {0, 2},     {57, 11},     {55, 3},     {55, 0},
        {56, 1},     {60, 3},     {60, 0},     {61, 0},     {52, 3},
        {52, 3},     {52, 0},     {39, 3},     {39, 3},     {39, 0},
        {13, 4},     {13, 4},     {1, 1},     {106, 0},     {105, 2},
        {11, 1},     {11, 0},     {10, 2},     {10, 1},     {9, 1},
        {9, 1},     {9, 1},     {9, 1},     {9, 1},     {9, 1},
        {9, 1},     {9, 1},     {9, 1},     {9, 1},     {9, 1},
        {9, 1},     {9, 1},     {9, 1},     {9, 1},     {9, 1},
        {9, 1},     {43, 3},     {43, 0},     {22, 1},     {22, 0},
        {23, 2},     {23, 1},     {24, 3},     {74, 1},     {74, 0},
        {75, 2},     {75, 1},     {76, 3},     {91, 2},     {77, 2},
        {78, 2},     {79, 3},     {79, 3},     {80, 3},     {80, 3},
        {80, 4},     {80, 4},     {81, 1},     {81, 0},     {82, 2},
        {82, 1},     {83, 3},     {89, 2},     {89, 3},     {84, 2},
        {94, 2},     {94, 1},     {86, 2},     {86, 1},     {87, 1},
        {93, 2},     {93, 1},     {92, 4},     {90, 1},     {85, 3},
        {88, 1},     {88, 2},     {53, 1},     {53, 0},     {58, 2},
        {58, 1},     {59, 3},     {54, 4},     {54, 0},     {62, 1},
        {62, 0},     {63, 2},     {63, 1},     {64, 3},     {65, 2},
        {20, 1},     {20, 0},     {18, 2},     {18, 1},     {19, 8},
        {19, 6},     {19, 4},     {6, 2},     {6, 0},     {66, 5},
        {67, 3},     {68, 1},     {68, 0},     {69, 2},     {69, 1},
        {70, 3},     {70, 3},     {70, 3},     {70, 4},     {7, 1},
        {7, 1},     {7, 1},     {8, 1},     {8, 1},     {71, 1},
        {71, 0},     {72, 2},     {72, 1},     {73, 7},     {73, 7},
        {2, 1},     {2, 0},     {3, 2},     {3, 0},     {4, 2},
        {4, 0},     {36, 1},     {36, 0},     {34, 2},     {34, 1},
        {35, 3},     {35, 2},     {15, 4},     {17, 3},     {41, 2},
        {41, 1},     {107, 0},     {40, 3},     {42, 1},     {42, 1},
        {42, 1},     {42, 1},     {42, 0},     {26, 2},     {26, 3},
        {16, 2},     {16, 2},     {16, 2},     {16, 2},     {16, 2},
        {16, 2},     {16, 2},     {16, 2},     {16, 2},     {16, 4},
        {16, 4},     {16, 2},     {102, 3},     {102, 4},     {103, 3},
        {104, 1},     {104, 0},     {95, 1},     {96, 2},     {98, 3},
        {98, 3},     {98, 0},     {99, 2},     {99, 0},     {100, 2},
        {101, 2},     {101, 3},     {101, 3},     {101, 2},     {101, 3},
        {101, 3},     {97, 2},     {51, 9},     {51, 5},     {51, 9},
        {5, 2},     {5, 0},     {27, 2},     {27, 2},     {27, 2},
        {46, 1},     {50, 1},     {12, 7},     {12, 7},     {37, 2},
        {21, 1},     {21, 1},     {38, 1},     {38, 3},     {38, 2},
        {38, 2},     {38, 2},     {38, 3},     {38, 3},     {38, 2},
        {38, 2},     {14, 2},     {14, 2},     {28, 3},     {29, 1},
        {32, 1},     {32, 0},     {33, 2},     {33, 1},     {31, 4},
        {31, 4},     {30, 3},     {30, 3},     {44, 3},     {45, 2},
        {45, 3},     {49, 2},     {49, 1},     {48, 2},     {48, 2},
        {47, 3},     {47, 3}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{3,-12,11,-12,15,-12,16,4,-1,0},
    /*1*/{0,-121,5,-121,8,-121,23,137,-1,0},
    /*2*/{0,135,-1,0},
    /*3*/{69,131,70,132,-1,0},
    /*4*/{3,-15,11,6,15,-15,-1,0},
    /*5*/{66,127,67,128,-1,0},
    /*6*/{3,9,15,8,-1,0},
    /*7*/{43,-19,44,-19,45,-19,46,-19,47,-19,48,-19,49,-19,50,-19,51,-19,52,-19,53,-19,54,-19,55,-19,56,-19,57,-19,58,-19,59,-19,67,-19,-1,0},
    /*8*/{43,-19,44,-19,45,-19,46,-19,47,-19,48,-19,49,-19,50,-19,51,-19,52,-19,53,-19,54,-19,55,-19,56,-19,57,-19,58,-19,59,-19,67,-19,-1,0},
    /*9*/{0,-43,5,-43,8,-43,10,12,14,-43,17,-43,18,-43,19,-43,21,-43,22,-43,23,-43,24,-43,-1,0},
    /*10*/{0,-45,5,-45,8,-45,14,17,17,-45,18,-45,19,-45,21,-45,22,-45,23,-45,24,-45,-1,0},
    /*11*/{67,13,-1,0},
    /*12*/{27,-18,37,-18,64,-18,-1,0},
    /*13*/{64,15,-1,0},
    /*14*/{0,-42,5,-42,8,-42,14,-42,17,-42,18,-42,19,-42,21,-42,22,-42,23,-42,24,-42,-1,0},
    /*15*/{0,-47,5,-47,8,-47,14,-47,17,-47,18,-47,19,-47,21,-47,22,-47,23,-47,24,-47,-1,0},
    /*16*/{67,13,-1,0},
    /*17*/{0,-5,5,-5,8,-5,17,-5,18,-5,19,22,21,-5,22,-5,23,-5,24,-5,-1,0},
    /*18*/{0,-44,5,-44,8,-44,14,17,17,-44,18,-44,19,-44,21,-44,22,-44,23,-44,24,-44,-1,0},
    /*19*/{0,-46,5,-46,8,-46,14,-46,17,-46,18,-46,19,-46,21,-46,22,-46,23,-46,24,-46,-1,0},
    /*20*/{0,-89,5,-89,8,-89,17,-89,18,26,21,-89,22,-89,23,-89,24,-89,-1,0},
    /*21*/{66,23,-1,0},
    /*22*/{64,-6,-1,0},
    /*23*/{64,25,-1,0},
    /*24*/{0,-4,5,-4,8,-4,17,-4,18,-4,21,-4,22,-4,23,-4,24,-4,-1,0},
    /*25*/{28,94,-1,0},
    /*26*/{0,-8,5,-8,8,-8,17,-8,21,-8,22,28,23,-8,24,-8,-1,0},
    /*27*/{64,-9,-1,0},
    /*28*/{0,-50,5,-50,8,-50,17,-50,21,-50,23,-50,24,34,-1,0},
    /*29*/{0,-52,5,-52,8,-52,17,-52,21,-52,23,-52,24,-52,-1,0},
    /*30*/{0,-49,5,-49,8,-49,17,-49,21,-49,23,-49,24,34,-1,0},
    /*31*/{4,-64,67,60,-1,0},
    /*32*/{0,-91,5,-91,8,-91,17,-91,21,43,23,-91,-1,0},
    /*33*/{38,36,39,35,-1,0},
    /*34*/{67,13,-1,0},
    /*35*/{67,13,-1,0},
    /*36*/{4,-56,67,-56,-1,0},
    /*37*/{64,39,-1,0},
    /*38*/{4,-57,67,-57,-1,0},
    /*39*/{64,41,-1,0},
    /*40*/{4,-58,67,-58,-1,0},
    /*41*/{0,-93,5,-93,8,-93,17,-93,21,-93,23,-93,-1,0},
    /*42*/{67,54,-1,0},
    /*43*/{0,-90,5,-90,8,-90,17,-90,21,43,23,-90,-1,0},
    /*44*/{0,-84,5,-84,8,-84,17,46,23,-84,-1,0},
    /*45*/{66,51,-1,0},
    /*46*/{0,-83,5,-83,8,-83,17,46,23,-83,-1,0},
    /*47*/{0,-86,5,-86,8,-86,17,-86,23,-86,-1,0},
    /*48*/{0,-3,5,-3,8,-3,23,-3,-1,0},
    /*49*/{0,-85,5,-85,8,-85,17,-85,23,-85,-1,0},
    /*50*/{64,52,-1,0},
    /*51*/{0,-87,5,-87,8,-87,17,-87,23,-87,-1,0},
    /*52*/{0,-92,5,-92,8,-92,17,-92,21,-92,23,-92,-1,0},
    /*53*/{66,57,-1,0},
    /*54*/{64,56,-1,0},
    /*55*/{0,-94,5,-94,8,-94,17,-94,21,-94,23,-94,-1,0},
    /*56*/{64,-95,-1,0},
    /*57*/{4,-63,67,60,-1,0},
    /*58*/{63,70,-1,0},
    /*59*/{67,68,-1,0},
    /*60*/{4,-66,67,-66,-1,0},
    /*61*/{4,65,-1,0},
    /*62*/{0,-53,5,-53,8,-53,17,-53,21,-53,23,-53,24,-53,-1,0},
    /*63*/{64,67,-1,0},
    /*64*/{54,66,-1,0},
    /*65*/{64,-55,-1,0},
    /*66*/{0,-54,4,-54,5,-54,8,-54,17,-54,19,-54,21,-54,22,-54,23,-54,24,-54,67,-54,-1,0},
    /*67*/{63,-68,67,69,-1,0},
    /*68*/{63,-69,-1,0},
    /*69*/{24,77,66,79,67,73,69,76,70,74,-1,0},
    /*70*/{64,88,66,79,67,73,69,76,70,74,-1,0},
    /*71*/{4,-67,67,-67,-1,0},
    /*72*/{64,-118,66,-118,67,-118,69,-118,70,-118,-1,0},
    /*73*/{64,-116,66,-116,67,-116,69,-116,70,-116,-1,0},
    /*74*/{4,-77,24,-77,67,-77,-1,0},
    /*75*/{64,-115,66,-115,67,-115,69,-115,70,-115,-1,0},
    /*76*/{64,84,-1,0},
    /*77*/{4,-72,24,77,67,-72,-1,0},
    /*78*/{64,-117,66,-117,67,-117,69,-117,70,-117,-1,0},
    /*79*/{64,-74,66,-74,67,-74,69,-74,70,-74,-1,0},
    /*80*/{64,-119,66,-119,67,-119,69,-119,70,-119,-1,0},
    /*81*/{64,-75,66,-75,67,-75,69,-75,70,-75,-1,0},
    /*82*/{4,-76,24,-76,67,-76,-1,0},
    /*83*/{4,-79,67,-79,-1,0},
    /*84*/{4,-64,67,60,-1,0},
    /*85*/{4,65,-1,0},
    /*86*/{4,-78,24,-78,67,-78,-1,0},
    /*87*/{4,-71,67,-71,-1,0},
    /*88*/{64,-73,66,-73,67,-73,69,-73,70,-73,-1,0},
    /*89*/{4,-65,67,-65,-1,0},
    /*90*/{0,-51,5,-51,8,-51,17,-51,21,-51,23,-51,24,-51,-1,0},
    /*91*/{64,93,-1,0},
    /*92*/{0,-7,5,-7,8,-7,17,-7,21,-7,23,-7,24,-7,-1,0},
    /*93*/{67,95,-1,0},
    /*94*/{64,96,-1,0},
    /*95*/{0,-88,5,-88,8,-88,17,-88,21,-88,22,-88,23,-88,24,-88,-1,0},
    /*96*/{64,98,-1,0},
    /*97*/{0,-48,5,-48,8,-48,14,-48,17,-48,18,-48,19,-48,21,-48,22,-48,23,-48,24,-48,-1,0},
    /*98*/{67,13,-1,0},
    /*99*/{36,-22,37,-22,43,117,44,113,45,115,46,105,47,103,48,111,49,107,50,109,51,118,52,112,53,108,54,106,55,114,56,104,57,116,58,110,59,102,64,-22,67,-22,-1,0},
    /*100*/{36,-21,37,-21,43,117,44,113,45,115,46,105,47,103,48,111,49,107,50,109,51,118,52,112,53,108,54,106,55,114,56,104,57,116,58,110,59,102,64,-21,67,-21,-1,0},
    /*101*/{36,-41,37,-41,43,-41,44,-41,45,-41,46,-41,47,-41,48,-41,49,-41,50,-41,51,-41,52,-41,53,-41,54,-41,55,-41,56,-41,57,-41,58,-41,59,-41,64,-41,67,-41,-1,0},
    /*102*/{36,-26,37,-26,43,-26,44,-26,45,-26,46,-26,47,-26,48,-26,49,-26,50,-26,51,-26,52,-26,53,-26,54,-26,55,-26,56,-26,57,-26,58,-26,59,-26,64,-26,67,-26,-1,0},
    /*103*/{36,-38,37,-38,43,-38,44,-38,45,-38,46,-38,47,-38,48,-38,49,-38,50,-38,51,-38,52,-38,53,-38,54,-38,55,-38,56,-38,57,-38,58,-38,59,-38,64,-38,67,-38,-1,0},
    /*104*/{36,-33,37,-33,43,-33,44,-33,45,-33,46,-33,47,-33,48,-33,49,-33,50,-33,51,-33,52,-33,53,-33,54,-33,55,-33,56,-33,57,-33,58,-33,59,-33,64,-33,67,-33,-1,0},
    /*105*/{36,-36,37,-36,43,-36,44,-36,45,-36,46,-36,47,-36,48,-36,49,-36,50,-36,51,-36,52,-36,53,-36,54,-36,55,-36,56,-36,57,-36,58,-36,59,-36,64,-36,67,-36,-1,0},
    /*106*/{36,-25,37,-25,43,-25,44,-25,45,-25,46,-25,47,-25,48,-25,49,-25,50,-25,51,-25,52,-25,53,-25,54,-25,55,-25,56,-25,57,-25,58,-25,59,-25,64,-25,67,-25,-1,0},
    /*107*/{36,-31,37,-31,43,-31,44,-31,45,-31,46,-31,47,-31,48,-31,49,-31,50,-31,51,-31,52,-31,53,-31,54,-31,55,-31,56,-31,57,-31,58,-31,59,-31,64,-31,67,-31,-1,0},
    /*108*/{36,-28,37,-28,43,-28,44,-28,45,-28,46,-28,47,-28,48,-28,49,-28,50,-28,51,-28,52,-28,53,-28,54,-28,55,-28,56,-28,57,-28,58,-28,59,-28,64,-28,67,-28,-1,0},
    /*109*/{36,-40,37,-40,43,-40,44,-40,45,-40,46,-40,47,-40,48,-40,49,-40,50,-40,51,-40,52,-40,53,-40,54,-40,55,-40,56,-40,57,-40,58,-40,59,-40,64,-40,67,-40,-1,0},
    /*110*/{36,-27,37,-27,43,-27,44,-27,45,-27,46,-27,47,-27,48,-27,49,-27,50,-27,51,-27,52,-27,53,-27,54,-27,55,-27,56,-27,57,-27,58,-27,59,-27,64,-27,67,-27,-1,0},
    /*111*/{36,-32,37,-32,43,-32,44,-32,45,-32,46,-32,47,-32,48,-32,49,-32,50,-32,51,-32,52,-32,53,-32,54,-32,55,-32,56,-32,57,-32,58,-32,59,-32,64,-32,67,-32,-1,0},
    /*112*/{36,-29,37,-29,43,-29,44,-29,45,-29,46,-29,47,-29,48,-29,49,-29,50,-29,51,-29,52,-29,53,-29,54,-29,55,-29,56,-29,57,-29,58,-29,59,-29,64,-29,67,-29,-1,0},
    /*113*/{36,-37,37,-37,43,-37,44,-37,45,-37,46,-37,47,-37,48,-37,49,-37,50,-37,51,-37,52,-37,53,-37,54,-37,55,-37,56,-37,57,-37,58,-37,59,-37,64,-37,67,-37,-1,0},
    /*114*/{36,-34,37,-34,43,-34,44,-34,45,-34,46,-34,47,-34,48,-34,49,-34,50,-34,51,-34,52,-34,53,-34,54,-34,55,-34,56,-34,57,-34,58,-34,59,-34,64,-34,67,-34,-1,0},
    /*115*/{36,-39,37,-39,43,-39,44,-39,45,-39,46,-39,47,-39,48,-39,49,-39,50,-39,51,-39,52,-39,53,-39,54,-39,55,-39,56,-39,57,-39,58,-39,59,-39,64,-39,67,-39,-1,0},
    /*116*/{36,-35,37,-35,43,-35,44,-35,45,-35,46,-35,47,-35,48,-35,49,-35,50,-35,51,-35,52,-35,53,-35,54,-35,55,-35,56,-35,57,-35,58,-35,59,-35,64,-35,67,-35,-1,0},
    /*117*/{36,-30,37,-30,43,-30,44,-30,45,-30,46,-30,47,-30,48,-30,49,-30,50,-30,51,-30,52,-30,53,-30,54,-30,55,-30,56,-30,57,-30,58,-30,59,-30,64,-30,67,-30,-1,0},
    /*118*/{36,-20,37,-20,64,-20,67,-20,-1,0},
    /*119*/{36,-24,37,-24,43,-24,44,-24,45,-24,46,-24,47,-24,48,-24,49,-24,50,-24,51,-24,52,-24,53,-24,54,-24,55,-24,56,-24,57,-24,58,-24,59,-24,64,-24,67,-24,-1,0},
    /*120*/{36,-23,37,-23,43,-23,44,-23,45,-23,46,-23,47,-23,48,-23,49,-23,50,-23,51,-23,52,-23,53,-23,54,-23,55,-23,56,-23,57,-23,58,-23,59,-23,64,-23,67,-23,-1,0},
    /*121*/{64,123,-1,0},
    /*122*/{0,-16,5,-16,8,-16,10,-16,14,-16,17,-16,18,-16,19,-16,21,-16,22,-16,23,-16,24,-16,-1,0},
    /*123*/{67,13,-1,0},
    /*124*/{64,126,-1,0},
    /*125*/{0,-17,5,-17,8,-17,10,-17,14,-17,17,-17,18,-17,19,-17,21,-17,22,-17,23,-17,24,-17,-1,0},
    /*126*/{64,130,-1,0},
    /*127*/{64,129,-1,0},
    /*128*/{3,-14,15,-14,-1,0},
    /*129*/{3,-13,15,-13,-1,0},
    /*130*/{64,134,-1,0},
    /*131*/{64,133,-1,0},
    /*132*/{3,-10,11,-10,15,-10,-1,0},
    /*133*/{3,-11,11,-11,15,-11,-1,0},
    /*134*/{0,-2,-1,0},
    /*135*/{0,-123,5,-123,8,-123,23,-123,-1,0},
    /*136*/{34,374,45,373,-1,0},
    /*137*/{0,-97,5,143,8,-97,-1,0},
    /*138*/{0,-120,5,-120,8,-120,23,137,-1,0},
    /*139*/{0,-122,5,-122,8,-122,23,-122,-1,0},
    /*140*/{0,-133,8,181,-1,0},
    /*141*/{0,-99,5,-99,8,-99,-1,0},
    /*142*/{43,-19,44,-19,45,-19,46,-19,47,-19,48,-19,49,-19,50,-19,51,-19,52,-19,53,-19,54,-19,55,-19,56,-19,57,-19,58,-19,59,-19,67,-19,-1,0},
    /*143*/{0,-96,5,143,8,-96,-1,0},
    /*144*/{0,-98,5,-98,8,-98,-1,0},
    /*145*/{67,169,-1,0},
    /*146*/{4,-108,19,153,21,149,22,148,24,154,-1,0},
    /*147*/{64,-9,-1,0},
    /*148*/{67,54,-1,0},
    /*149*/{4,-107,19,153,21,149,22,148,24,154,-1,0},
    /*150*/{4,-110,19,-110,21,-110,22,-110,24,-110,-1,0},
    /*151*/{4,160,-1,0},
    /*152*/{66,23,-1,0},
    /*153*/{38,36,39,35,-1,0},
    /*154*/{4,-64,67,60,-1,0},
    /*155*/{4,65,-1,0},
    /*156*/{4,-114,19,-114,21,-114,22,-114,24,-114,-1,0},
    /*157*/{64,159,-1,0},
    /*158*/{4,-111,19,-111,21,-111,22,-111,24,-111,-1,0},
    /*159*/{33,162,-1,0},
    /*160*/{0,-102,5,-102,8,-102,-1,0},
    /*161*/{64,163,-1,0},
    /*162*/{0,-106,5,-106,8,-106,-1,0},
    /*163*/{4,-109,19,-109,21,-109,22,-109,24,-109,-1,0},
    /*164*/{64,166,-1,0},
    /*165*/{4,-112,19,-112,21,-112,22,-112,24,-112,-1,0},
    /*166*/{64,168,-1,0},
    /*167*/{4,-113,19,-113,21,-113,22,-113,24,-113,-1,0},
    /*168*/{67,170,-1,0},
    /*169*/{29,173,63,171,64,-104,-1,0},
    /*170*/{66,79,69,76,70,74,-1,0},
    /*171*/{64,177,-1,0},
    /*172*/{66,174,-1,0},
    /*173*/{63,171,64,-104,-1,0},
    /*174*/{64,176,-1,0},
    /*175*/{0,-100,5,-100,8,-100,-1,0},
    /*176*/{0,-101,4,-105,5,-101,8,-101,19,-105,21,-105,22,-105,24,-105,-1,0},
    /*177*/{64,-103,-1,0},
    /*178*/{0,-1,-1,0},
    /*179*/{0,-135,8,-135,-1,0},
    /*180*/{43,-19,44,-19,45,-19,46,-19,47,-19,48,-19,49,-19,50,-19,51,-19,52,-19,53,-19,54,-19,55,-19,56,-19,57,-19,58,-19,59,-19,67,-19,-1,0},
    /*181*/{1,-142,2,-142,4,187,6,-142,7,-142,9,-142,12,-142,13,-142,19,-142,20,-142,21,-142,22,-142,24,-142,60,-142,61,-142,64,-142,67,-142,68,-142,69,-142,-1,0},
    /*182*/{0,-132,8,181,-1,0},
    /*183*/{0,-134,8,-134,-1,0},
    /*184*/{1,-142,2,-142,4,187,6,-142,7,-142,9,-142,12,-142,13,-142,19,-142,20,-142,21,-142,22,-142,24,-142,60,-142,61,-142,64,-142,67,-142,68,-142,69,-142,-1,0},
    /*185*/{1,207,2,200,6,195,7,208,9,209,12,214,13,194,19,196,20,205,21,193,22,212,24,197,60,206,61,204,64,-148,67,192,68,203,69,198,-1,0},
    /*186*/{28,190,-1,0},
    /*187*/{1,-141,2,-141,4,-141,6,-141,7,-141,9,-141,12,-141,13,-141,19,-141,20,-141,21,-141,22,-141,24,-141,60,-141,61,-141,64,-141,67,-141,68,-141,69,-141,-1,0},
    /*188*/{0,-137,8,-137,-1,0},
    /*189*/{64,191,-1,0},
    /*190*/{0,-139,8,-139,-1,0},
    /*191*/{65,367,-1,0},
    /*192*/{67,54,-1,0},
    /*193*/{69,352,-1,0},
    /*194*/{30,345,32,347,67,346,-1,0},
    /*195*/{66,23,-1,0},
    /*196*/{38,319,39,317,40,322,41,321,62,316,-1,0},
    /*197*/{65,314,-1,0},
    /*198*/{64,-147,-1,0},
    /*199*/{67,13,-1,0},
    /*200*/{64,-145,-1,0},
    /*201*/{64,300,-1,0},
    /*202*/{64,-198,66,292,67,293,69,295,70,296,71,294,-1,0},
    /*203*/{69,276,-1,0},
    /*204*/{42,244,64,241,-1,0},
    /*205*/{64,223,-1,0},
    /*206*/{64,-146,-1,0},
    /*207*/{69,222,-1,0},
    /*208*/{67,219,-1,0},
    /*209*/{64,-196,-1,0},
    /*210*/{64,-144,-1,0},
    /*211*/{64,-9,-1,0},
    /*212*/{64,-197,-1,0},
    /*213*/{67,13,-1,0},
    /*214*/{64,-192,-1,0},
    /*215*/{64,-154,-1,0},
    /*216*/{64,-159,-1,0},
    /*217*/{64,-156,-1,0},
    /*218*/{66,79,67,73,69,76,70,74,-1,0},
    /*219*/{64,-195,-1,0},
    /*220*/{64,-153,-1,0},
    /*221*/{64,-191,-1,0},
    /*222*/{62,-210,69,-210,-1,0},
    /*223*/{62,-212,69,229,-1,0},
    /*224*/{64,-207,-1,0},
    /*225*/{62,-211,69,229,-1,0},
    /*226*/{62,-214,69,-214,-1,0},
    /*227*/{62,236,-1,0},
    /*228*/{65,230,-1,0},
    /*229*/{67,231,69,232,-1,0},
    /*230*/{64,234,-1,0},
    /*231*/{64,233,-1,0},
    /*232*/{62,-216,69,-216,-1,0},
    /*233*/{62,-215,69,-215,-1,0},
    /*234*/{64,-209,-1,0},
    /*235*/{65,237,-1,0},
    /*236*/{67,238,69,239,-1,0},
    /*237*/{64,-217,-1,0},
    /*238*/{64,-218,-1,0},
    /*239*/{62,-213,69,-213,-1,0},
    /*240*/{4,-168,30,-168,31,-168,32,-168,-1,0},
    /*241*/{4,-172,30,-172,31,249,32,-172,-1,0},
    /*242*/{64,-162,-1,0},
    /*243*/{32,-167,69,247,-1,0},
    /*244*/{32,270,-1,0},
    /*245*/{4,-172,30,-172,31,249,32,-172,-1,0},
    /*246*/{32,-166,-1,0},
    /*247*/{4,267,-1,0},
    /*248*/{67,263,69,264,-1,0},
    /*249*/{4,-174,30,-174,32,-174,-1,0},
    /*250*/{4,-169,30,252,32,255,-1,0},
    /*251*/{67,260,-1,0},
    /*252*/{4,-173,30,-173,32,-173,-1,0},
    /*253*/{64,259,-1,0},
    /*254*/{67,256,-1,0},
    /*255*/{64,-176,67,257,69,258,-1,0},
    /*256*/{64,-177,-1,0},
    /*257*/{64,-178,-1,0},
    /*258*/{4,-175,30,-175,32,-175,-1,0},
    /*259*/{64,-179,67,261,69,262,-1,0},
    /*260*/{64,-180,-1,0},
    /*261*/{64,-181,-1,0},
    /*262*/{64,266,-1,0},
    /*263*/{64,265,-1,0},
    /*264*/{4,-170,30,-170,32,-170,-1,0},
    /*265*/{4,-171,30,-171,32,-171,-1,0},
    /*266*/{30,269,-1,0},
    /*267*/{64,-164,-1,0},
    /*268*/{64,-182,-1,0},
    /*269*/{64,271,-1,0},
    /*270*/{4,-165,30,-165,31,-165,32,-165,-1,0},
    /*271*/{4,267,-1,0},
    /*272*/{64,-163,-1,0},
    /*273*/{67,280,69,283,-1,0},
    /*274*/{64,-208,-1,0},
    /*275*/{64,277,69,278,-1,0},
    /*276*/{67,-220,69,-220,-1,0},
    /*277*/{64,279,-1,0},
    /*278*/{67,-221,69,-221,-1,0},
    /*279*/{64,291,-1,0},
    /*280*/{62,285,67,280,69,283,-1,0},
    /*281*/{62,-223,67,-223,69,-223,-1,0},
    /*282*/{64,284,-1,0},
    /*283*/{62,-225,67,-225,69,-225,-1,0},
    /*284*/{65,288,-1,0},
    /*285*/{62,-222,67,-222,69,-222,-1,0},
    /*286*/{64,-219,-1,0},
    /*287*/{67,289,69,290,-1,0},
    /*288*/{64,-226,-1,0},
    /*289*/{64,-227,-1,0},
    /*290*/{62,-224,67,-224,69,-224,-1,0},
    /*291*/{64,-205,-1,0},
    /*292*/{64,-202,67,298,69,299,-1,0},
    /*293*/{64,-206,-1,0},
    /*294*/{64,-200,69,297,-1,0},
    /*295*/{64,-201,-1,0},
    /*296*/{64,-199,-1,0},
    /*297*/{64,-204,-1,0},
    /*298*/{64,-203,-1,0},
    /*299*/{1,-143,2,-143,4,-143,6,-143,7,-143,9,-143,12,-143,13,-143,19,-143,20,-143,21,-143,22,-143,24,-143,60,-143,61,-143,64,-143,67,-143,68,-143,69,-143,-1,0},
    /*300*/{64,-155,-1,0},
    /*301*/{27,303,-1,0},
    /*302*/{67,304,69,305,-1,0},
    /*303*/{35,310,-1,0},
    /*304*/{35,306,-1,0},
    /*305*/{69,307,-1,0},
    /*306*/{25,308,-1,0},
    /*307*/{69,309,-1,0},
    /*308*/{64,-194,-1,0},
    /*309*/{67,311,-1,0},
    /*310*/{25,312,-1,0},
    /*311*/{67,313,-1,0},
    /*312*/{64,-193,-1,0},
    /*313*/{60,206,61,204,68,203,-1,0},
    /*314*/{64,-150,-1,0},
    /*315*/{64,342,-1,0},
    /*316*/{67,13,-1,0},
    /*317*/{4,-64,67,60,-1,0},
    /*318*/{67,13,-1,0},
    /*319*/{67,329,-1,0},
    /*320*/{69,326,-1,0},
    /*321*/{69,323,-1,0},
    /*322*/{67,13,-1,0},
    /*323*/{64,325,-1,0},
    /*324*/{4,-61,67,-61,-1,0},
    /*325*/{67,13,-1,0},
    /*326*/{64,328,-1,0},
    /*327*/{4,-62,67,-62,-1,0},
    /*328*/{63,-81,67,335,-1,0},
    /*329*/{4,65,-1,0},
    /*330*/{63,332,-1,0},
    /*331*/{24,77,66,79,67,73,69,76,70,74,-1,0},
    /*332*/{4,-80,-1,0},
    /*333*/{64,-161,-1,0},
    /*334*/{63,-82,-1,0},
    /*335*/{64,337,-1,0},
    /*336*/{4,-59,67,-59,-1,0},
    /*337*/{4,65,-1,0},
    /*338*/{64,-160,-1,0},
    /*339*/{64,341,-1,0},
    /*340*/{4,-60,67,-60,-1,0},
    /*341*/{67,-70,-1,0},
    /*342*/{64,-157,-1,0},
    /*343*/{64,-152,-1,0},
    /*344*/{69,350,-1,0},
    /*345*/{69,349,-1,0},
    /*346*/{69,348,-1,0},
    /*347*/{64,-188,-1,0},
    /*348*/{64,-190,-1,0},
    /*349*/{64,-189,-1,0},
    /*350*/{64,-151,-1,0},
    /*351*/{26,353,-1,0},
    /*352*/{67,354,-1,0},
    /*353*/{67,355,-1,0},
    /*354*/{27,-187,29,356,64,-187,-1,0},
    /*355*/{66,365,-1,0},
    /*356*/{27,358,64,-184,-1,0},
    /*357*/{67,359,69,360,-1,0},
    /*358*/{35,363,-1,0},
    /*359*/{35,361,-1,0},
    /*360*/{69,362,-1,0},
    /*361*/{64,-185,-1,0},
    /*362*/{67,364,-1,0},
    /*363*/{64,-183,-1,0},
    /*364*/{27,-186,64,-186,-1,0},
    /*365*/{64,-158,-1,0},
    /*366*/{64,-149,-1,0},
    /*367*/{1,-140,2,-140,4,-140,6,-140,7,-140,9,-140,12,-140,13,-140,19,-140,20,-140,21,-140,22,-140,24,-140,60,-140,61,-140,64,-140,67,-140,68,-140,69,-140,-1,0},
    /*368*/{0,-136,8,-136,-1,0},
    /*369*/{67,371,-1,0},
    /*370*/{64,372,-1,0},
    /*371*/{1,-138,2,-138,4,-138,6,-138,7,-138,9,-138,12,-138,13,-138,19,-138,20,-138,21,-138,22,-138,24,-138,60,-138,61,-138,64,-138,67,-138,68,-138,69,-138,-1,0},
    /*372*/{36,-19,37,-19,43,-19,44,-19,45,-19,46,-19,47,-19,48,-19,49,-19,50,-19,51,-19,52,-19,53,-19,54,-19,55,-19,56,-19,57,-19,58,-19,59,-19,64,-19,67,-19,-1,0},
    /*373*/{36,-19,37,-19,43,-19,44,-19,45,-19,46,-19,47,-19,48,-19,49,-19,50,-19,51,-19,52,-19,53,-19,54,-19,55,-19,56,-19,57,-19,58,-19,59,-19,64,-19,67,-19,-1,0},
    /*374*/{36,-127,37,-127,64,-127,67,377,-1,0},
    /*375*/{36,378,37,-129,64,-129,-1,0},
    /*376*/{36,-126,37,-126,64,-126,-1,0},
    /*377*/{67,13,-1,0},
    /*378*/{37,380,64,-131,-1,0},
    /*379*/{67,13,-1,0},
    /*380*/{64,382,-1,0},
    /*381*/{0,-124,5,-124,8,-124,23,-124,-1,0},
    /*382*/{64,-130,-1,0},
    /*383*/{37,-128,64,-128,-1,0},
    /*384*/{36,-127,37,-127,64,-127,67,377,-1,0},
    /*385*/{36,378,37,-129,64,-129,-1,0},
    /*386*/{37,380,64,-131,-1,0},
    /*387*/{64,389,-1,0},
    /*388*/{0,-125,5,-125,8,-125,23,-125,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{25,2,52,4,57,1,-1,-1},
    /*1*/{71,137,72,138,73,135,-1,-1},
    /*2*/{-1,-1},
    /*3*/{-1,-1},
    /*4*/{39,6,-1,-1},
    /*5*/{-1,-1},
    /*6*/{13,9,-1,-1},
    /*7*/{105,123,106,99,-1,-1},
    /*8*/{105,98,106,99,-1,-1},
    /*9*/{43,10,-1,-1},
    /*10*/{22,17,23,18,24,15,-1,-1},
    /*11*/{1,13,-1,-1},
    /*12*/{-1,-1},
    /*13*/{-1,-1},
    /*14*/{-1,-1},
    /*15*/{-1,-1},
    /*16*/{1,96,-1,-1},
    /*17*/{55,20,-1,-1},
    /*18*/{24,19,-1,-1},
    /*19*/{-1,-1},
    /*20*/{54,26,-1,-1},
    /*21*/{56,23,-1,-1},
    /*22*/{-1,-1},
    /*23*/{-1,-1},
    /*24*/{-1,-1},
    /*25*/{-1,-1},
    /*26*/{60,28,-1,-1},
    /*27*/{61,91,-1,-1},
    /*28*/{74,32,75,30,76,29,78,31,-1,-1},
    /*29*/{-1,-1},
    /*30*/{76,90,78,31,-1,-1},
    /*31*/{81,61,82,57,83,60,89,58,-1,-1},
    /*32*/{62,44,63,43,64,41,-1,-1},
    /*33*/{79,36,-1,-1},
    /*34*/{1,39,-1,-1},
    /*35*/{1,37,-1,-1},
    /*36*/{-1,-1},
    /*37*/{-1,-1},
    /*38*/{-1,-1},
    /*39*/{-1,-1},
    /*40*/{-1,-1},
    /*41*/{-1,-1},
    /*42*/{65,54,-1,-1},
    /*43*/{64,52,-1,-1},
    /*44*/{53,48,58,46,59,47,-1,-1},
    /*45*/{-1,-1},
    /*46*/{59,49,-1,-1},
    /*47*/{-1,-1},
    /*48*/{-1,-1},
    /*49*/{-1,-1},
    /*50*/{-1,-1},
    /*51*/{-1,-1},
    /*52*/{-1,-1},
    /*53*/{-1,-1},
    /*54*/{-1,-1},
    /*55*/{-1,-1},
    /*56*/{-1,-1},
    /*57*/{83,89,89,58,-1,-1},
    /*58*/{-1,-1},
    /*59*/{-1,-1},
    /*60*/{-1,-1},
    /*61*/{77,63,91,62,-1,-1},
    /*62*/{-1,-1},
    /*63*/{-1,-1},
    /*64*/{-1,-1},
    /*65*/{-1,-1},
    /*66*/{-1,-1},
    /*67*/{-1,-1},
    /*68*/{-1,-1},
    /*69*/{7,80,8,81,86,70,87,79,92,74,93,77,94,71,-1,-1},
    /*70*/{7,80,8,81,87,88,-1,-1},
    /*71*/{-1,-1},
    /*72*/{-1,-1},
    /*73*/{-1,-1},
    /*74*/{-1,-1},
    /*75*/{-1,-1},
    /*76*/{90,84,-1,-1},
    /*77*/{92,82,-1,-1},
    /*78*/{-1,-1},
    /*79*/{-1,-1},
    /*80*/{-1,-1},
    /*81*/{-1,-1},
    /*82*/{-1,-1},
    /*83*/{-1,-1},
    /*84*/{81,85,82,57,83,60,89,58,-1,-1},
    /*85*/{77,63,91,86,-1,-1},
    /*86*/{-1,-1},
    /*87*/{-1,-1},
    /*88*/{-1,-1},
    /*89*/{-1,-1},
    /*90*/{-1,-1},
    /*91*/{-1,-1},
    /*92*/{-1,-1},
    /*93*/{-1,-1},
    /*94*/{-1,-1},
    /*95*/{-1,-1},
    /*96*/{-1,-1},
    /*97*/{-1,-1},
    /*98*/{1,121,-1,-1},
    /*99*/{9,119,10,100,11,118,-1,-1},
    /*100*/{9,120,-1,-1},
    /*101*/{-1,-1},
    /*102*/{-1,-1},
    /*103*/{-1,-1},
    /*104*/{-1,-1},
    /*105*/{-1,-1},
    /*106*/{-1,-1},
    /*107*/{-1,-1},
    /*108*/{-1,-1},
    /*109*/{-1,-1},
    /*110*/{-1,-1},
    /*111*/{-1,-1},
    /*112*/{-1,-1},
    /*113*/{-1,-1},
    /*114*/{-1,-1},
    /*115*/{-1,-1},
    /*116*/{-1,-1},
    /*117*/{-1,-1},
    /*118*/{-1,-1},
    /*119*/{-1,-1},
    /*120*/{-1,-1},
    /*121*/{-1,-1},
    /*122*/{-1,-1},
    /*123*/{1,124,-1,-1},
    /*124*/{-1,-1},
    /*125*/{-1,-1},
    /*126*/{-1,-1},
    /*127*/{-1,-1},
    /*128*/{-1,-1},
    /*129*/{-1,-1},
    /*130*/{-1,-1},
    /*131*/{-1,-1},
    /*132*/{-1,-1},
    /*133*/{-1,-1},
    /*134*/{-1,-1},
    /*135*/{-1,-1},
    /*136*/{-1,-1},
    /*137*/{18,143,19,141,20,140,-1,-1},
    /*138*/{73,139,-1,-1},
    /*139*/{-1,-1},
    /*140*/{15,181,34,182,35,179,36,178,-1,-1},
    /*141*/{-1,-1},
    /*142*/{66,146,105,145,106,99,-1,-1},
    /*143*/{19,144,-1,-1},
    /*144*/{-1,-1},
    /*145*/{-1,-1},
    /*146*/{68,151,69,149,70,150,-1,-1},
    /*147*/{61,166,-1,-1},
    /*148*/{65,164,-1,-1},
    /*149*/{70,163,-1,-1},
    /*150*/{-1,-1},
    /*151*/{67,160,-1,-1},
    /*152*/{56,157,-1,-1},
    /*153*/{79,154,-1,-1},
    /*154*/{81,155,82,57,83,60,89,58,-1,-1},
    /*155*/{77,63,91,156,-1,-1},
    /*156*/{-1,-1},
    /*157*/{-1,-1},
    /*158*/{-1,-1},
    /*159*/{-1,-1},
    /*160*/{-1,-1},
    /*161*/{-1,-1},
    /*162*/{-1,-1},
    /*163*/{-1,-1},
    /*164*/{-1,-1},
    /*165*/{-1,-1},
    /*166*/{-1,-1},
    /*167*/{-1,-1},
    /*168*/{-1,-1},
    /*169*/{6,171,-1,-1},
    /*170*/{7,177,-1,-1},
    /*171*/{-1,-1},
    /*172*/{-1,-1},
    /*173*/{6,174,-1,-1},
    /*174*/{-1,-1},
    /*175*/{-1,-1},
    /*176*/{-1,-1},
    /*177*/{-1,-1},
    /*178*/{-1,-1},
    /*179*/{-1,-1},
    /*180*/{105,369,106,99,-1,-1},
    /*181*/{17,188,40,187,41,184,107,185,-1,-1},
    /*182*/{15,181,35,183,-1,-1},
    /*183*/{-1,-1},
    /*184*/{17,368,40,367,107,185,-1,-1},
    /*185*/{14,212,16,200,21,210,26,198,38,209,42,201,-1,-1},
    /*186*/{-1,-1},
    /*187*/{-1,-1},
    /*188*/{-1,-1},
    /*189*/{-1,-1},
    /*190*/{-1,-1},
    /*191*/{-1,-1},
    /*192*/{65,365,-1,-1},
    /*193*/{51,350,-1,-1},
    /*194*/{27,343,-1,-1},
    /*195*/{56,342,-1,-1},
    /*196*/{80,317,84,319,-1,-1},
    /*197*/{-1,-1},
    /*198*/{-1,-1},
    /*199*/{1,301,12,300,-1,-1},
    /*200*/{-1,-1},
    /*201*/{-1,-1},
    /*202*/{-1,-1},
    /*203*/{44,274,45,273,-1,-1},
    /*204*/{95,241,102,242,-1,-1},
    /*205*/{28,224,29,223,-1,-1},
    /*206*/{-1,-1},
    /*207*/{46,220,-1,-1},
    /*208*/{37,217,-1,-1},
    /*209*/{-1,-1},
    /*210*/{-1,-1},
    /*211*/{61,216,-1,-1},
    /*212*/{-1,-1},
    /*213*/{1,214,50,215,-1,-1},
    /*214*/{-1,-1},
    /*215*/{-1,-1},
    /*216*/{-1,-1},
    /*217*/{-1,-1},
    /*218*/{7,80,8,219,-1,-1},
    /*219*/{-1,-1},
    /*220*/{-1,-1},
    /*221*/{-1,-1},
    /*222*/{-1,-1},
    /*223*/{31,226,32,227,33,225,-1,-1},
    /*224*/{-1,-1},
    /*225*/{31,239,-1,-1},
    /*226*/{-1,-1},
    /*227*/{30,234,-1,-1},
    /*228*/{-1,-1},
    /*229*/{-1,-1},
    /*230*/{-1,-1},
    /*231*/{-1,-1},
    /*232*/{-1,-1},
    /*233*/{-1,-1},
    /*234*/{-1,-1},
    /*235*/{-1,-1},
    /*236*/{-1,-1},
    /*237*/{-1,-1},
    /*238*/{-1,-1},
    /*239*/{-1,-1},
    /*240*/{-1,-1},
    /*241*/{96,271,98,249,-1,-1},
    /*242*/{-1,-1},
    /*243*/{103,245,104,244,-1,-1},
    /*244*/{-1,-1},
    /*245*/{96,247,98,249,-1,-1},
    /*246*/{-1,-1},
    /*247*/{97,267,-1,-1},
    /*248*/{-1,-1},
    /*249*/{99,250,-1,-1},
    /*250*/{100,252,101,253,-1,-1},
    /*251*/{-1,-1},
    /*252*/{-1,-1},
    /*253*/{-1,-1},
    /*254*/{-1,-1},
    /*255*/{-1,-1},
    /*256*/{-1,-1},
    /*257*/{-1,-1},
    /*258*/{-1,-1},
    /*259*/{-1,-1},
    /*260*/{-1,-1},
    /*261*/{-1,-1},
    /*262*/{-1,-1},
    /*263*/{-1,-1},
    /*264*/{-1,-1},
    /*265*/{-1,-1},
    /*266*/{-1,-1},
    /*267*/{-1,-1},
    /*268*/{-1,-1},
    /*269*/{-1,-1},
    /*270*/{-1,-1},
    /*271*/{97,272,-1,-1},
    /*272*/{-1,-1},
    /*273*/{48,281,49,280,-1,-1},
    /*274*/{-1,-1},
    /*275*/{-1,-1},
    /*276*/{-1,-1},
    /*277*/{-1,-1},
    /*278*/{-1,-1},
    /*279*/{-1,-1},
    /*280*/{47,286,48,285,-1,-1},
    /*281*/{-1,-1},
    /*282*/{-1,-1},
    /*283*/{-1,-1},
    /*284*/{-1,-1},
    /*285*/{-1,-1},
    /*286*/{-1,-1},
    /*287*/{-1,-1},
    /*288*/{-1,-1},
    /*289*/{-1,-1},
    /*290*/{-1,-1},
    /*291*/{-1,-1},
    /*292*/{-1,-1},
    /*293*/{-1,-1},
    /*294*/{-1,-1},
    /*295*/{-1,-1},
    /*296*/{-1,-1},
    /*297*/{-1,-1},
    /*298*/{-1,-1},
    /*299*/{-1,-1},
    /*300*/{-1,-1},
    /*301*/{-1,-1},
    /*302*/{-1,-1},
    /*303*/{-1,-1},
    /*304*/{-1,-1},
    /*305*/{-1,-1},
    /*306*/{-1,-1},
    /*307*/{-1,-1},
    /*308*/{-1,-1},
    /*309*/{-1,-1},
    /*310*/{-1,-1},
    /*311*/{-1,-1},
    /*312*/{-1,-1},
    /*313*/{14,212,21,314,38,209,-1,-1},
    /*314*/{-1,-1},
    /*315*/{-1,-1},
    /*316*/{1,339,-1,-1},
    /*317*/{81,337,82,57,83,60,89,58,-1,-1},
    /*318*/{1,335,-1,-1},
    /*319*/{85,329,88,330,-1,-1},
    /*320*/{-1,-1},
    /*321*/{-1,-1},
    /*322*/{1,323,-1,-1},
    /*323*/{-1,-1},
    /*324*/{-1,-1},
    /*325*/{1,326,-1,-1},
    /*326*/{-1,-1},
    /*327*/{-1,-1},
    /*328*/{-1,-1},
    /*329*/{77,333,-1,-1},
    /*330*/{-1,-1},
    /*331*/{7,80,8,81,86,70,87,79,92,74,93,77,94,332,-1,-1},
    /*332*/{-1,-1},
    /*333*/{-1,-1},
    /*334*/{-1,-1},
    /*335*/{-1,-1},
    /*336*/{-1,-1},
    /*337*/{77,338,-1,-1},
    /*338*/{-1,-1},
    /*339*/{-1,-1},
    /*340*/{-1,-1},
    /*341*/{-1,-1},
    /*342*/{-1,-1},
    /*343*/{-1,-1},
    /*344*/{-1,-1},
    /*345*/{-1,-1},
    /*346*/{-1,-1},
    /*347*/{-1,-1},
    /*348*/{-1,-1},
    /*349*/{-1,-1},
    /*350*/{-1,-1},
    /*351*/{-1,-1},
    /*352*/{-1,-1},
    /*353*/{-1,-1},
    /*354*/{5,356,-1,-1},
    /*355*/{-1,-1},
    /*356*/{-1,-1},
    /*357*/{-1,-1},
    /*358*/{-1,-1},
    /*359*/{-1,-1},
    /*360*/{-1,-1},
    /*361*/{-1,-1},
    /*362*/{-1,-1},
    /*363*/{-1,-1},
    /*364*/{-1,-1},
    /*365*/{-1,-1},
    /*366*/{-1,-1},
    /*367*/{-1,-1},
    /*368*/{-1,-1},
    /*369*/{-1,-1},
    /*370*/{-1,-1},
    /*371*/{-1,-1},
    /*372*/{105,384,106,99,-1,-1},
    /*373*/{105,374,106,99,-1,-1},
    /*374*/{2,375,-1,-1},
    /*375*/{3,378,-1,-1},
    /*376*/{-1,-1},
    /*377*/{1,383,-1,-1},
    /*378*/{4,380,-1,-1},
    /*379*/{1,382,-1,-1},
    /*380*/{-1,-1},
    /*381*/{-1,-1},
    /*382*/{-1,-1},
    /*383*/{-1,-1},
    /*384*/{2,385,-1,-1},
    /*385*/{3,386,-1,-1},
    /*386*/{4,387,-1,-1},
    /*387*/{-1,-1},
    /*388*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$actions();
    }

  /** invoke a user supplied parse action */
  public symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 1;}

  /** EOF symbol index */
  public int EOF_sym() {return 0;}

  /** error symbol index */
  public int error_sym() {return 1;}


  /** user initialization */
  public void user_init() throws Exception
    {

	action_obj.scanner = scanner;
	action_obj.classFile = classFile;

    }

  /** scan to get the next token */
  public token scan()
    throws Exception
    {

    return scanner.next_token();

    }



	// parser code

	public Scanner scanner;
	public ClassFile classFile;

	public void report_error(String message, Object info) {
    	    classFile.report_error("Warning - " + message);
	}

	public void report_fatal_error(String message, Object info)  {
    	    classFile.report_error("Error - " + message);
    	    // System.exit(-1);
	}

	parser(ClassFile classFile, Scanner scanner) {
		super();

	    this.scanner = scanner;
	    this.classFile = classFile;
	}

};

/** JavaCup generated class to encapsulate user supplied action code.*/
class CUP$actions {


    short access_val;
	public ClassFile classFile;
    public Scanner scanner;


  /** Constructor */
  CUP$actions() { }

  /** Method with the actual generated action code. */
  public final symbol CUP$do_action(
    int                        CUP$act_num,
    lr_parser CUP$parser,
    java.util.Stack            CUP$stack,
    int                        CUP$top)
    throws Exception
    {
      /* object for return from actions */
      symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // table_default ::= DEFAULT COLON Int
            {
              CUP$result = new symbol(/*table_default*/47);
               classFile.endTableswitch((/*off*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // table_default ::= DEFAULT COLON Word
            {
              CUP$result = new symbol(/*table_default*/47);
               classFile.endTableswitch((/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // table_entry ::= Int SEP
            {
              CUP$result = new symbol(/*table_entry*/48);
               classFile.addTableswitch((/*off*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // table_entry ::= Word SEP
            {
              CUP$result = new symbol(/*table_entry*/48);
               classFile.addTableswitch((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // table_list ::= table_entry
            {
              CUP$result = new symbol(/*table_list*/49);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // table_list ::= table_list table_entry
            {
              CUP$result = new symbol(/*table_list*/49);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // table_args ::= Int Int SEP
            {
              CUP$result = new symbol(/*table_args*/45);
               classFile.newTableswitch((/*low*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val, (/*high*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // table_args ::= Int SEP
            {
              CUP$result = new symbol(/*table_args*/45);
               classFile.newTableswitch((/*low*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // table ::= table_args table_list table_default
            {
              CUP$result = new symbol(/*table*/44);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // lookup_default ::= DEFAULT COLON Int
            {
              CUP$result = new symbol(/*lookup_default*/30);
               classFile.endLookupswitch((/*off*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // lookup_default ::= DEFAULT COLON Word
            {
              CUP$result = new symbol(/*lookup_default*/30);
               classFile.endLookupswitch((/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // lookup_entry ::= Int COLON Int SEP
            {
              CUP$result = new symbol(/*lookup_entry*/31);
               classFile.addLookupswitch((/*i*/(int_token)CUP$stack.elementAt(CUP$top-3)).int_val, (/*off*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // lookup_entry ::= Int COLON Word SEP
            {
              CUP$result = new symbol(/*lookup_entry*/31);
               classFile.addLookupswitch((/*i*/(int_token)CUP$stack.elementAt(CUP$top-3)).int_val, (/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // lookup_items ::= lookup_entry
            {
              CUP$result = new symbol(/*lookup_items*/33);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // lookup_items ::= lookup_items lookup_entry
            {
              CUP$result = new symbol(/*lookup_items*/33);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // lookup_list ::=
            {
              CUP$result = new symbol(/*lookup_list*/32);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // lookup_list ::= lookup_items
            {
              CUP$result = new symbol(/*lookup_list*/32);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // lookup_args ::= SEP
            {
              CUP$result = new symbol(/*lookup_args*/29);
               classFile.newLookupswitch();
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // lookup ::= lookup_args lookup_list lookup_default
            {
              CUP$result = new symbol(/*lookup*/28);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // complex_instruction ::= TABLESWITCH table
            {
              CUP$result = new symbol(/*complex_instruction*/14);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // complex_instruction ::= LOOKUPSWITCH lookup
            {
              CUP$result = new symbol(/*complex_instruction*/14);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // simple_instruction ::= Insn Relative
            {
              CUP$result = new symbol(/*simple_instruction*/38);
               classFile.plantRelativeGoto((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(relative_num_token)CUP$stack.elementAt(CUP$top-0)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // simple_instruction ::= Insn Str
            {
              CUP$result = new symbol(/*simple_instruction*/38);
               classFile.plantString((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // simple_instruction ::= Insn Word Word
            {
              CUP$result = new symbol(/*simple_instruction*/38);
               classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*n1*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n2*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // simple_instruction ::= Insn Word Int
            {
              CUP$result = new symbol(/*simple_instruction*/38);
               classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*n*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n2*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // simple_instruction ::= Insn Word
            {
              CUP$result = new symbol(/*simple_instruction*/38);
               classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // simple_instruction ::= Insn Num
            {
              CUP$result = new symbol(/*simple_instruction*/38);
               classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(num_token)CUP$stack.elementAt(CUP$top-0)).num_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // simple_instruction ::= Insn Int
            {
              CUP$result = new symbol(/*simple_instruction*/38);
               classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // simple_instruction ::= Insn Int Int
            {
              CUP$result = new symbol(/*simple_instruction*/38);
               classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*n1*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val, (/*n2*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // simple_instruction ::= Insn
            {
              CUP$result = new symbol(/*simple_instruction*/38);
               classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // instruction ::= complex_instruction
            {
              CUP$result = new symbol(/*instruction*/21);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // instruction ::= simple_instruction
            {
              CUP$result = new symbol(/*instruction*/21);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // set_expr ::= Word any_item
            {
              CUP$result = new symbol(/*set_expr*/37);
               scanner.dict.put((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*v*/(var_token)CUP$stack.elementAt(CUP$top-0)));
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // catch_expr ::= classname FROM Int TO Int USING Int
            {
              CUP$result = new symbol(/*catch_expr*/12);
               classFile.addCatch((/*aclass*/(str_token)CUP$stack.elementAt(CUP$top-6)).str_val,
                              (/*fromoff*/(int_token)CUP$stack.elementAt(CUP$top-4)).int_val,
                              (/*tooff*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val,
                              (/*branchoff*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // catch_expr ::= classname FROM Word TO Word USING Word
            {
              CUP$result = new symbol(/*catch_expr*/12);
               classFile.addCatch((/*aclass*/(str_token)CUP$stack.elementAt(CUP$top-6)).str_val,
                              (/*fromlab*/(str_token)CUP$stack.elementAt(CUP$top-4)).str_val,
                              (/*tolab*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val,
                              (/*branchlab*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // throws_expr ::= classname
            {
              CUP$result = new symbol(/*throws_expr*/50);
               classFile.addThrow((/*s*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // line_expr ::= Int
            {
              CUP$result = new symbol(/*line_expr*/46);
               classFile.addLine((/*v*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // limit_expr ::= Word Int
            {
              CUP$result = new symbol(/*limit_expr*/27);
               classFile.report_error(".limit expected \"stack\" or \"locals\", but got "
                                + (/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // limit_expr ::= STACK Int
            {
              CUP$result = new symbol(/*limit_expr*/27);
               classFile.setStackSize((/*v*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // limit_expr ::= LOCALS Int
            {
              CUP$result = new symbol(/*limit_expr*/27);
               classFile.setVarSize((/*v*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // optional_signature ::=
            {
              CUP$result = new str_token(/*optional_signature*/5);
               ((str_token)CUP$result).str_val = null;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // optional_signature ::= SIGNATURE Str
            {
              CUP$result = new str_token(/*optional_signature*/5);
               ((str_token)CUP$result).str_val = (/*s*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // var_expr ::= Int IS Word Word optional_signature FROM Int TO Int
            {
              CUP$result = new symbol(/*var_expr*/51);
               classFile.addVar((/*soff*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val, (/*eoff*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-6)).str_val,
                            (/*desc*/(str_token)CUP$stack.elementAt(CUP$top-5)).str_val, (/*sign*/(str_token)CUP$stack.elementAt(CUP$top-4)).str_val, (/*reg*/(int_token)CUP$stack.elementAt(CUP$top-8)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // var_expr ::= Int IS Word Word optional_signature
            {
              CUP$result = new symbol(/*var_expr*/51);
               classFile.addVar(null, null, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*desc*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val,
                            (/*sign*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val,  (/*reg*/(int_token)CUP$stack.elementAt(CUP$top-4)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // var_expr ::= Int IS Word Word optional_signature FROM Word TO Word
            {
              CUP$result = new symbol(/*var_expr*/51);
               classFile.addVar((/*slab*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*elab*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-6)).str_val,
                            (/*desc*/(str_token)CUP$stack.elementAt(CUP$top-5)).str_val, (/*sign*/(str_token)CUP$stack.elementAt(CUP$top-4)).str_val, (/*reg*/(int_token)CUP$stack.elementAt(CUP$top-8)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // endstack ::= DEND STACK
            {
              CUP$result = new symbol(/*endstack*/97);
               classFile.endStack();
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // stack_item_expr ::= STACK Word Int
            {
              CUP$result = new symbol(/*stack_item_expr*/101);
               classFile.plantStackStack((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, String.valueOf((/*n*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val));
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // stack_item_expr ::= STACK Word Word
            {
              CUP$result = new symbol(/*stack_item_expr*/101);
               classFile.plantStackStack((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*val*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // stack_item_expr ::= STACK Word
            {
              CUP$result = new symbol(/*stack_item_expr*/101);
               classFile.plantStackStack((/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val, null);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // stack_item_expr ::= LOCALS Word Int
            {
              CUP$result = new symbol(/*stack_item_expr*/101);
               classFile.plantStackLocals((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, String.valueOf((/*n*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val));
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // stack_item_expr ::= LOCALS Word Word
            {
              CUP$result = new symbol(/*stack_item_expr*/101);
               classFile.plantStackLocals((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*val*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // stack_item_expr ::= LOCALS Word
            {
              CUP$result = new symbol(/*stack_item_expr*/101);
               classFile.plantStackLocals((/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val, null);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // stack_item ::= stack_item_expr SEP
            {
              CUP$result = new symbol(/*stack_item*/100);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // stack_items ::=
            {
              CUP$result = new symbol(/*stack_items*/99);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // stack_items ::= stack_items stack_item
            {
              CUP$result = new symbol(/*stack_items*/99);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // stack_offset_def ::=
            {
              CUP$result = new symbol(/*stack_offset_def*/98);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // stack_offset_def ::= OFFSET Word SEP
            {
              CUP$result = new symbol(/*stack_offset_def*/98);
               classFile.plantStackOffset((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // stack_offset_def ::= OFFSET Int SEP
            {
              CUP$result = new symbol(/*stack_offset_def*/98);
               classFile.plantStackOffset((/*n*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // stack_map_frame_desc ::= stack_offset_def stack_items
            {
              CUP$result = new symbol(/*stack_map_frame_desc*/96);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // defstack ::= SEP
            {
              CUP$result = new symbol(/*defstack*/95);
               classFile.beginStack(false);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // defstack_same_expr ::=
            {
              CUP$result = new symbol(/*defstack_same_expr*/104);
               classFile.beginStack(true);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // defstack_same_expr ::= Int
            {
              CUP$result = new symbol(/*defstack_same_expr*/104);
               classFile.beginStack((/*n*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // defstack_same ::= defstack_same_expr LOCALS SEP
            {
              CUP$result = new symbol(/*defstack_same*/103);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // stackmap ::= USE defstack_same stack_map_frame_desc endstack
            {
              CUP$result = new symbol(/*stackmap*/102);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // stackmap ::= defstack stack_map_frame_desc endstack
            {
              CUP$result = new symbol(/*stackmap*/102);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // directive ::= DSTACK stackmap
            {
              CUP$result = new symbol(/*directive*/16);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // directive ::= DANNOTATION ann_def_spec ann_def_val endannotation
            {
              CUP$result = new symbol(/*directive*/16);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // directive ::= DANNOTATION ann_met_expr ann_arglist endannotation
            {
              CUP$result = new symbol(/*directive*/16);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // directive ::= DDEPRECATED deprecated_expr
            {
              CUP$result = new symbol(/*directive*/16);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // directive ::= DATTRIBUTE generic_expr
            {
              CUP$result = new symbol(/*directive*/16);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // directive ::= DSIGNATURE signature_expr
            {
              CUP$result = new symbol(/*directive*/16);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // directive ::= DSET set_expr
            {
              CUP$result = new symbol(/*directive*/16);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // directive ::= DCATCH catch_expr
            {
              CUP$result = new symbol(/*directive*/16);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // directive ::= DTHROWS throws_expr
            {
              CUP$result = new symbol(/*directive*/16);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // directive ::= DLINE line_expr
            {
              CUP$result = new symbol(/*directive*/16);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // directive ::= DLIMIT limit_expr
            {
              CUP$result = new symbol(/*directive*/16);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // directive ::= DVAR var_expr
            {
              CUP$result = new symbol(/*directive*/16);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // label ::= Int COLON instruction
            {
              CUP$result = new symbol(/*label*/26);
               classFile.plantLabel(String.valueOf((/*label*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val));
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // label ::= Word COLON
            {
              CUP$result = new symbol(/*label*/26);
               classFile.plantLabel((/*label*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // stmnt ::=
            {
              CUP$result = new symbol(/*stmnt*/42);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // stmnt ::= label
            {
              CUP$result = new symbol(/*stmnt*/42);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // stmnt ::= error
            {
              CUP$result = new symbol(/*stmnt*/42);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // stmnt ::= directive
            {
              CUP$result = new symbol(/*stmnt*/42);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // stmnt ::= instruction
            {
              CUP$result = new symbol(/*stmnt*/42);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // statement ::= NT$1 stmnt SEP
            {
              CUP$result = new symbol(/*statement*/40);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$1 ::=
            {
              CUP$result = new token(/*NT$1*/107);
               classFile.setLine(scanner.token_line_num);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // statements ::= statement
            {
              CUP$result = new symbol(/*statements*/41);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // statements ::= statements statement
            {
              CUP$result = new symbol(/*statements*/41);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // endmethod ::= DEND METHOD SEP
            {
              CUP$result = new symbol(/*endmethod*/17);
               classFile.endMethod();
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // defmethod ::= DMETHOD access Word SEP
            {
              CUP$result = new symbol(/*defmethod*/15);
               String split[] = ScannerUtils.splitMethodSignature((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
           classFile.newMethod(split[0], split[1], (/*i*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // method_spec ::= defmethod endmethod
            {
              CUP$result = new symbol(/*method_spec*/35);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // method_spec ::= defmethod statements endmethod
            {
              CUP$result = new symbol(/*method_spec*/35);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // method_list ::= method_spec
            {
              CUP$result = new symbol(/*method_list*/34);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // method_list ::= method_list method_spec
            {
              CUP$result = new symbol(/*method_list*/34);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // methods ::=
            {
              CUP$result = new symbol(/*methods*/36);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // methods ::= method_list
            {
              CUP$result = new symbol(/*methods*/36);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // inner_outer ::=
            {
              CUP$result = new str_token(/*inner_outer*/4);
               ((str_token)CUP$result).str_val = null;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // inner_outer ::= OUTER classname
            {
              CUP$result = new str_token(/*inner_outer*/4);
               ((str_token)CUP$result).str_val = (/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // inner_inner ::=
            {
              CUP$result = new str_token(/*inner_inner*/3);
               ((str_token)CUP$result).str_val = null;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // inner_inner ::= INNER classname
            {
              CUP$result = new str_token(/*inner_inner*/3);
               ((str_token)CUP$result).str_val = (/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // inner_name ::=
            {
              CUP$result = new str_token(/*inner_name*/2);
               ((str_token)CUP$result).str_val = null;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // inner_name ::= Word
            {
              CUP$result = new str_token(/*inner_name*/2);
               ((str_token)CUP$result).str_val = (/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // inner_spec ::= DINNER INTERFACE access inner_name inner_inner inner_outer SEP
            {
              CUP$result = new symbol(/*inner_spec*/73);
               classFile.addInner((short)((/*a*/(int_token)CUP$stack.elementAt(CUP$top-4)).int_val |
                              RuntimeConstants.ACC_INTERFACE |
                              RuntimeConstants.ACC_ABSTRACT),
                                (/*n*/(str_token)CUP$stack.elementAt(CUP$top-3)).str_val, (/*i*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*o*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // inner_spec ::= DINNER CLASS access inner_name inner_inner inner_outer SEP
            {
              CUP$result = new symbol(/*inner_spec*/73);
               classFile.addInner((short)(/*a*/(int_token)CUP$stack.elementAt(CUP$top-4)).int_val,
                              (/*n*/(str_token)CUP$stack.elementAt(CUP$top-3)).str_val, (/*i*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*o*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // inner_list ::= inner_spec
            {
              CUP$result = new symbol(/*inner_list*/72);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // inner_list ::= inner_list inner_spec
            {
              CUP$result = new symbol(/*inner_list*/72);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // inners ::=
            {
              CUP$result = new symbol(/*inners*/71);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // inners ::= inner_list
            {
              CUP$result = new symbol(/*inners*/71);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // any_item ::= item
            {
              CUP$result = new var_token(/*any_item*/8);
               ((var_token)CUP$result).var_val = (/*v*/(var_token)CUP$stack.elementAt(CUP$top-0)).var_val;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // any_item ::= Word
            {
              CUP$result = new var_token(/*any_item*/8);
               ((var_token)CUP$result).var_val = (/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // item ::= Str
            {
              CUP$result = new var_token(/*item*/7);
               ((var_token)CUP$result).var_val = (/*s*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // item ::= Num
            {
              CUP$result = new var_token(/*item*/7);
               ((var_token)CUP$result).var_val = (/*n*/(num_token)CUP$stack.elementAt(CUP$top-0)).num_val;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // item ::= Int
            {
              CUP$result = new var_token(/*item*/7);
               ((var_token)CUP$result).var_val = new Integer((/*i*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // field_ext_expr ::= DANNOTATION ann_clf_expr ann_arglist endannotationsep
            {
              CUP$result = new symbol(/*field_ext_expr*/70);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // field_ext_expr ::= DDEPRECATED deprecated_expr SEP
            {
              CUP$result = new symbol(/*field_ext_expr*/70);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // field_ext_expr ::= DATTRIBUTE generic_expr SEP
            {
              CUP$result = new symbol(/*field_ext_expr*/70);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // field_ext_expr ::= DSIGNATURE signature_expr SEP
            {
              CUP$result = new symbol(/*field_ext_expr*/70);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // field_ext_list ::= field_ext_expr
            {
              CUP$result = new symbol(/*field_ext_list*/69);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // field_ext_list ::= field_ext_list field_ext_expr
            {
              CUP$result = new symbol(/*field_ext_list*/69);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // field_exts ::=
            {
              CUP$result = new symbol(/*field_exts*/68);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // field_exts ::= field_ext_list
            {
              CUP$result = new symbol(/*field_exts*/68);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // endfield ::= DEND FIELD SEP
            {
              CUP$result = new symbol(/*endfield*/67);
               classFile.endField();
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // field_start ::= access Word Word optional_default SEP
            {
              CUP$result = new symbol(/*field_start*/66);
               classFile.beginField((short)(/*a*/(int_token)CUP$stack.elementAt(CUP$top-4)).int_val, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-3)).str_val,
                              (/*desc*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*v*/(var_token)CUP$stack.elementAt(CUP$top-1)).var_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // optional_default ::=
            {
              CUP$result = new var_token(/*optional_default*/6);
               ((var_token)CUP$result).var_val = null;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // optional_default ::= EQ item
            {
              CUP$result = new var_token(/*optional_default*/6);
               ((var_token)CUP$result).var_val = (/*v*/(var_token)CUP$stack.elementAt(CUP$top-0)).var_val;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // field_spec ::= DFIELD field_start field_exts endfield
            {
              CUP$result = new symbol(/*field_spec*/19);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // field_spec ::= DFIELD access Word Word optional_default SEP
            {
              CUP$result = new symbol(/*field_spec*/19);
               classFile.addField((short)(/*a*/(int_token)CUP$stack.elementAt(CUP$top-4)).int_val, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-3)).str_val, (/*desc*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val,
                               null, (/*v*/(var_token)CUP$stack.elementAt(CUP$top-1)).var_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // field_spec ::= DFIELD access Word Word SIGNATURE Str optional_default SEP
            {
              CUP$result = new symbol(/*field_spec*/19);
               classFile.addField((short)(/*a*/(int_token)CUP$stack.elementAt(CUP$top-6)).int_val, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-5)).str_val, (/*desc*/(str_token)CUP$stack.elementAt(CUP$top-4)).str_val,
                              (/*sig*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*v*/(var_token)CUP$stack.elementAt(CUP$top-1)).var_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // field_list ::= field_spec
            {
              CUP$result = new symbol(/*field_list*/18);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // field_list ::= field_list field_spec
            {
              CUP$result = new symbol(/*field_list*/18);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // fields ::=
            {
              CUP$result = new symbol(/*fields*/20);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // fields ::= field_list
            {
              CUP$result = new symbol(/*fields*/20);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // generic_expr ::= Word Str
            {
              CUP$result = new symbol(/*generic_expr*/65);
               classFile.addGenericAttr((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*file*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // generic_spec ::= DATTRIBUTE generic_expr SEP
            {
              CUP$result = new symbol(/*generic_spec*/64);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // generic_list ::= generic_spec
            {
              CUP$result = new symbol(/*generic_list*/63);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // generic_list ::= generic_list generic_spec
            {
              CUP$result = new symbol(/*generic_list*/63);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // generic_attributes ::=
            {
              CUP$result = new symbol(/*generic_attributes*/62);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // generic_attributes ::= generic_list
            {
              CUP$result = new symbol(/*generic_attributes*/62);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // enclosing_spec ::=
            {
              CUP$result = new symbol(/*enclosing_spec*/54);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // enclosing_spec ::= DENCLOSING METHOD Word SEP
            {
              CUP$result = new symbol(/*enclosing_spec*/54);
               classFile.setEnclosingMethod((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // debug_spec ::= DDEBUG Str SEP
            {
              CUP$result = new symbol(/*debug_spec*/59);
               classFile.setSourceDebugExtension((/*s*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // debug_list ::= debug_spec
            {
              CUP$result = new symbol(/*debug_list*/58);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // debug_list ::= debug_list debug_spec
            {
              CUP$result = new symbol(/*debug_list*/58);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // debug_extension ::=
            {
              CUP$result = new symbol(/*debug_extension*/53);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // debug_extension ::= debug_list
            {
              CUP$result = new symbol(/*debug_extension*/53);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ann_def_expr ::= Word Word
            {
              CUP$result = new symbol(/*ann_def_expr*/88);
               classFile.addAnnotationField(null, (/*dsc*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*sub*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ann_def_expr ::= Word
            {
              CUP$result = new symbol(/*ann_def_expr*/88);
               classFile.addAnnotationField(null, (/*dsc*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val, null);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ann_def_val ::= ann_def_expr EQ ann_value_list
            {
              CUP$result = new symbol(/*ann_def_val*/85);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ann_nest ::= SEP
            {
              CUP$result = new symbol(/*ann_nest*/90);
               classFile.nestAnnotation();
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ann_ann_value ::= DANNOTATION ann_nest ann_arglist endannotationsep
            {
              CUP$result = new symbol(/*ann_ann_value*/92);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ann_ann_list ::= ann_ann_value
            {
              CUP$result = new symbol(/*ann_ann_list*/93);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ann_ann_list ::= ann_ann_list ann_ann_value
            {
              CUP$result = new symbol(/*ann_ann_list*/93);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ann_value ::= any_item
            {
              CUP$result = new symbol(/*ann_value*/87);
               classFile.addAnnotationValue((/*v*/(var_token)CUP$stack.elementAt(CUP$top-0)).var_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ann_value_items ::= ann_value
            {
              CUP$result = new symbol(/*ann_value_items*/86);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ann_value_items ::= ann_value_items ann_value
            {
              CUP$result = new symbol(/*ann_value_items*/86);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ann_value_list ::= ann_ann_list
            {
              CUP$result = new symbol(/*ann_value_list*/94);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ann_value_list ::= ann_value_items SEP
            {
              CUP$result = new symbol(/*ann_value_list*/94);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ann_def_spec ::= DEFAULT SEP
            {
              CUP$result = new symbol(/*ann_def_spec*/84);
               classFile.addAnnotation();
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ann_arg_expr ::= Word Word Word
            {
              CUP$result = new symbol(/*ann_arg_expr*/89);
               classFile.addAnnotationField((/*n*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*dsc*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*sub*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ann_arg_expr ::= Word Word
            {
              CUP$result = new symbol(/*ann_arg_expr*/89);
               classFile.addAnnotationField((/*n*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*dsc*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val, null);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ann_arg_spec ::= ann_arg_expr EQ ann_value_list
            {
              CUP$result = new symbol(/*ann_arg_spec*/83);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ann_arg_list ::= ann_arg_spec
            {
              CUP$result = new symbol(/*ann_arg_list*/82);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ann_arg_list ::= ann_arg_list ann_arg_spec
            {
              CUP$result = new symbol(/*ann_arg_list*/82);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ann_arglist ::=
            {
              CUP$result = new symbol(/*ann_arglist*/81);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ann_arglist ::= ann_arg_list
            {
              CUP$result = new symbol(/*ann_arglist*/81);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ann_met_expr ::= INVISIBLEPARAM Int classname SEP
            {
              CUP$result = new symbol(/*ann_met_expr*/80);
               classFile.addAnnotation(false, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ann_met_expr ::= VISIBLEPARAM Int classname SEP
            {
              CUP$result = new symbol(/*ann_met_expr*/80);
               classFile.addAnnotation(true, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ann_met_expr ::= INVISIBLE classname SEP
            {
              CUP$result = new symbol(/*ann_met_expr*/80);
               classFile.addAnnotation(false, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ann_met_expr ::= VISIBLE classname SEP
            {
              CUP$result = new symbol(/*ann_met_expr*/80);
               classFile.addAnnotation(true, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ann_clf_expr ::= INVISIBLE classname SEP
            {
              CUP$result = new symbol(/*ann_clf_expr*/79);
               classFile.addAnnotation(false, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ann_clf_expr ::= VISIBLE classname SEP
            {
              CUP$result = new symbol(/*ann_clf_expr*/79);
               classFile.addAnnotation(true, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ann_cls_expr ::= DANNOTATION ann_clf_expr
            {
              CUP$result = new symbol(/*ann_cls_expr*/78);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // endannotation ::= DEND ANNOTATION
            {
              CUP$result = new symbol(/*endannotation*/77);
               classFile.endAnnotation();
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // endannotationsep ::= endannotation SEP
            {
              CUP$result = new symbol(/*endannotationsep*/91);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ann_cls_spec ::= ann_cls_expr ann_arglist endannotationsep
            {
              CUP$result = new symbol(/*ann_cls_spec*/76);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ann_cls_list ::= ann_cls_spec
            {
              CUP$result = new symbol(/*ann_cls_list*/75);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ann_cls_list ::= ann_cls_list ann_cls_spec
            {
              CUP$result = new symbol(/*ann_cls_list*/75);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // annotations ::=
            {
              CUP$result = new symbol(/*annotations*/74);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // annotations ::= ann_cls_list
            {
              CUP$result = new symbol(/*annotations*/74);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // implements_spec ::= DIMPLEMENTS classname SEP
            {
              CUP$result = new symbol(/*implements_spec*/24);
               classFile.addInterface((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // implements_list ::= implements_spec
            {
              CUP$result = new symbol(/*implements_list*/23);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // implements_list ::= implements_list implements_spec
            {
              CUP$result = new symbol(/*implements_list*/23);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // implements ::=
            {
              CUP$result = new symbol(/*implements*/22);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // implements ::= implements_list
            {
              CUP$result = new symbol(/*implements*/22);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // super_spec ::=
            {
              CUP$result = new symbol(/*super_spec*/43);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // super_spec ::= DSUPER classname SEP
            {
              CUP$result = new symbol(/*super_spec*/43);
               classFile.setSuperClass((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // access_item ::= SYNTHETIC
            {
              CUP$result = new symbol(/*access_item*/9);
               access_val |= RuntimeConstants.ACC_SYNTHETIC;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // access_item ::= STRICT
            {
              CUP$result = new symbol(/*access_item*/9);
               access_val |= RuntimeConstants.ACC_STRICT;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // access_item ::= VARARGS
            {
              CUP$result = new symbol(/*access_item*/9);
               access_val |= RuntimeConstants.ACC_VARARGS;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // access_item ::= BRIDGE
            {
              CUP$result = new symbol(/*access_item*/9);
               access_val |= RuntimeConstants.ACC_BRIDGE;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // access_item ::= ENUM
            {
              CUP$result = new symbol(/*access_item*/9);
               access_val |= RuntimeConstants.ACC_ENUM;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // access_item ::= ANNOTATION
            {
              CUP$result = new symbol(/*access_item*/9);
               access_val |= RuntimeConstants.ACC_ANNOTATION;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // access_item ::= ABSTRACT
            {
              CUP$result = new symbol(/*access_item*/9);
               access_val |= RuntimeConstants.ACC_ABSTRACT;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // access_item ::= INTERFACE
            {
              CUP$result = new symbol(/*access_item*/9);
               access_val |= RuntimeConstants.ACC_INTERFACE;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // access_item ::= NATIVE
            {
              CUP$result = new symbol(/*access_item*/9);
               access_val |= RuntimeConstants.ACC_NATIVE;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // access_item ::= TRANSIENT
            {
              CUP$result = new symbol(/*access_item*/9);
               access_val |= RuntimeConstants.ACC_TRANSIENT;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // access_item ::= VOLATILE
            {
              CUP$result = new symbol(/*access_item*/9);
               access_val |= RuntimeConstants.ACC_VOLATILE;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // access_item ::= SYNCHRONIZED
            {
              CUP$result = new symbol(/*access_item*/9);
               access_val |= RuntimeConstants.ACC_SYNCHRONIZED;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // access_item ::= FINAL
            {
              CUP$result = new symbol(/*access_item*/9);
               access_val |= RuntimeConstants.ACC_FINAL;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // access_item ::= STATIC
            {
              CUP$result = new symbol(/*access_item*/9);
               access_val |= RuntimeConstants.ACC_STATIC;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // access_item ::= PROTECTED
            {
              CUP$result = new symbol(/*access_item*/9);
               access_val |= RuntimeConstants.ACC_PROTECTED;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // access_item ::= PRIVATE
            {
              CUP$result = new symbol(/*access_item*/9);
               access_val |= RuntimeConstants.ACC_PRIVATE;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // access_item ::= PUBLIC
            {
              CUP$result = new symbol(/*access_item*/9);
               access_val |= RuntimeConstants.ACC_PUBLIC;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // access_items ::= access_item
            {
              CUP$result = new symbol(/*access_items*/10);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // access_items ::= access_items access_item
            {
              CUP$result = new symbol(/*access_items*/10);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // access_list ::=
            {
              CUP$result = new symbol(/*access_list*/11);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // access_list ::= access_items
            {
              CUP$result = new symbol(/*access_list*/11);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // access ::= NT$0 access_list
            {
              CUP$result = new int_token(/*access*/105);
               ((int_token)CUP$result).int_val = access_val;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$0 ::=
            {
              CUP$result = new token(/*NT$0*/106);
               access_val = 0;
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // classname ::= Word
            {
              CUP$result = new str_token(/*classname*/1);
               ((str_token)CUP$result).str_val = ScannerUtils.convertDots((/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // class_spec ::= DINTERFACE access classname SEP
            {
              CUP$result = new symbol(/*class_spec*/13);
               classFile.setClass((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val,
                (short)((/*a*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val |
                        RuntimeConstants.ACC_INTERFACE));
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // class_spec ::= DCLASS access classname SEP
            {
              CUP$result = new symbol(/*class_spec*/13);
               classFile.setClass((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val,
                (short)((/*a*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val | RuntimeConstants.ACC_SUPER));
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // source_spec ::=
            {
              CUP$result = new symbol(/*source_spec*/39);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // source_spec ::= DSOURCE Word SEP
            {
              CUP$result = new symbol(/*source_spec*/39);
               classFile.setSource((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // source_spec ::= DSOURCE Str SEP
            {
              CUP$result = new symbol(/*source_spec*/39);
               classFile.setSource((/*s*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bytecode_spec ::=
            {
              CUP$result = new symbol(/*bytecode_spec*/52);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bytecode_spec ::= DBYTECODE Int SEP
            {
              CUP$result = new symbol(/*bytecode_spec*/52);
               classFile.setVersion((/*n*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bytecode_spec ::= DBYTECODE Num SEP
            {
              CUP$result = new symbol(/*bytecode_spec*/52);
               classFile.setVersion((/*n*/(num_token)CUP$stack.elementAt(CUP$top-1)).num_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // deprecated_expr ::=
            {
              CUP$result = new symbol(/*deprecated_expr*/61);
               classFile.setDeprecated();
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // deprecated_spec ::=
            {
              CUP$result = new symbol(/*deprecated_spec*/60);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // deprecated_spec ::= DDEPRECATED deprecated_expr SEP
            {
              CUP$result = new symbol(/*deprecated_spec*/60);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // signature_expr ::= Str
            {
              CUP$result = new symbol(/*signature_expr*/56);
               classFile.setSignature((/*sig*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // signature_spec ::=
            {
              CUP$result = new symbol(/*signature_spec*/55);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // signature_spec ::= DSIGNATURE signature_expr SEP
            {
              CUP$result = new symbol(/*signature_spec*/55);

            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // jasmin_header ::= bytecode_spec source_spec class_spec super_spec implements signature_spec enclosing_spec deprecated_spec annotations generic_attributes debug_extension
            {
              CUP$result = new symbol(/*jasmin_header*/57);
               classFile.endHeader();
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= jas_file EOF
            {
              CUP$result = new token(/*$START*/0);
              
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // jas_file ::= jasmin_header inners fields methods 
            {
              CUP$result = new symbol(/*jas_file*/25);
              
            }
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
};

